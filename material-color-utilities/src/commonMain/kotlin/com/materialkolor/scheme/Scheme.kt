/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// This file is automatically generated. Do not modify it.
package com.materialkolor.scheme

import com.materialkolor.palettes.CorePalette
import dev.drewhamilton.poko.Poko

/**
 * Represents a Material color scheme, a mapping of color roles to colors.
 */
@Suppress("unused", "MemberVisibilityCanBePrivate")
@Poko
internal class Scheme(
    var primary: Int = 0,
    var onPrimary: Int = 0,
    var primaryContainer: Int = 0,
    var onPrimaryContainer: Int = 0,
    var secondary: Int = 0,
    var onSecondary: Int = 0,
    var secondaryContainer: Int = 0,
    var onSecondaryContainer: Int = 0,
    var tertiary: Int = 0,
    var onTertiary: Int = 0,
    var tertiaryContainer: Int = 0,
    var onTertiaryContainer: Int = 0,
    var error: Int = 0,
    var onError: Int = 0,
    var errorContainer: Int = 0,
    var onErrorContainer: Int = 0,
    var background: Int = 0,
    var onBackground: Int = 0,
    var surface: Int = 0,
    var onSurface: Int = 0,
    var surfaceVariant: Int = 0,
    var onSurfaceVariant: Int = 0,
    var outline: Int = 0,
    var outlineVariant: Int = 0,
    var shadow: Int = 0,
    var scrim: Int = 0,
    var inverseSurface: Int = 0,
    var inverseOnSurface: Int = 0,
    var inversePrimary: Int = 0,
) {

    fun withPrimary(primary: Int): Scheme {
        this.primary = primary
        return this
    }

    fun withOnPrimary(onPrimary: Int): Scheme {
        this.onPrimary = onPrimary
        return this
    }

    fun withPrimaryContainer(primaryContainer: Int): Scheme {
        this.primaryContainer = primaryContainer
        return this
    }

    fun withOnPrimaryContainer(onPrimaryContainer: Int): Scheme {
        this.onPrimaryContainer = onPrimaryContainer
        return this
    }

    fun withSecondary(secondary: Int): Scheme {
        this.secondary = secondary
        return this
    }

    fun withOnSecondary(onSecondary: Int): Scheme {
        this.onSecondary = onSecondary
        return this
    }

    fun withSecondaryContainer(secondaryContainer: Int): Scheme {
        this.secondaryContainer = secondaryContainer
        return this
    }

    fun withOnSecondaryContainer(onSecondaryContainer: Int): Scheme {
        this.onSecondaryContainer = onSecondaryContainer
        return this
    }

    fun withTertiary(tertiary: Int): Scheme {
        this.tertiary = tertiary
        return this
    }

    fun withOnTertiary(onTertiary: Int): Scheme {
        this.onTertiary = onTertiary
        return this
    }

    fun withTertiaryContainer(tertiaryContainer: Int): Scheme {
        this.tertiaryContainer = tertiaryContainer
        return this
    }

    fun withOnTertiaryContainer(onTertiaryContainer: Int): Scheme {
        this.onTertiaryContainer = onTertiaryContainer
        return this
    }

    fun withError(error: Int): Scheme {
        this.error = error
        return this
    }

    fun withOnError(onError: Int): Scheme {
        this.onError = onError
        return this
    }

    fun withErrorContainer(errorContainer: Int): Scheme {
        this.errorContainer = errorContainer
        return this
    }

    fun withOnErrorContainer(onErrorContainer: Int): Scheme {
        this.onErrorContainer = onErrorContainer
        return this
    }

    fun withBackground(background: Int): Scheme {
        this.background = background
        return this
    }

    fun withOnBackground(onBackground: Int): Scheme {
        this.onBackground = onBackground
        return this
    }

    fun withSurface(surface: Int): Scheme {
        this.surface = surface
        return this
    }

    fun withOnSurface(onSurface: Int): Scheme {
        this.onSurface = onSurface
        return this
    }

    fun withSurfaceVariant(surfaceVariant: Int): Scheme {
        this.surfaceVariant = surfaceVariant
        return this
    }

    fun withOnSurfaceVariant(onSurfaceVariant: Int): Scheme {
        this.onSurfaceVariant = onSurfaceVariant
        return this
    }

    fun withOutline(outline: Int): Scheme {
        this.outline = outline
        return this
    }

    fun withOutlineVariant(outlineVariant: Int): Scheme {
        this.outlineVariant = outlineVariant
        return this
    }

    fun withShadow(shadow: Int): Scheme {
        this.shadow = shadow
        return this
    }

    fun withScrim(scrim: Int): Scheme {
        this.scrim = scrim
        return this
    }

    fun withInverseSurface(inverseSurface: Int): Scheme {
        this.inverseSurface = inverseSurface
        return this
    }

    fun withInverseOnSurface(inverseOnSurface: Int): Scheme {
        this.inverseOnSurface = inverseOnSurface
        return this
    }

    fun withInversePrimary(inversePrimary: Int): Scheme {
        this.inversePrimary = inversePrimary
        return this
    }

    companion object {

        /**
         * Creates a light theme Scheme from a source color in ARGB, i.e. a hex code.
         */
        fun light(argb: Int): Scheme {
            return lightFromCorePalette(CorePalette.of(argb))
        }

        /**
         * Creates a dark theme Scheme from a source color in ARGB, i.e. a hex code.
         */
        fun dark(argb: Int): Scheme {
            return darkFromCorePalette(CorePalette.of(argb))
        }

        /**
         * Creates a light theme content-based Scheme from a source color in ARGB, i.e. a hex code.
         */
        fun lightContent(argb: Int): Scheme {
            return lightFromCorePalette(CorePalette.contentOf(argb))
        }

        /**
         * Creates a dark theme content-based Scheme from a source color in ARGB, i.e. a hex code.
         */
        fun darkContent(argb: Int): Scheme {
            return darkFromCorePalette(CorePalette.contentOf(argb))
        }

        private fun lightFromCorePalette(core: CorePalette): Scheme = Scheme()
            .withPrimary(core.a1.tone(40))
            .withOnPrimary(core.a1.tone(100))
            .withPrimaryContainer(core.a1.tone(90))
            .withOnPrimaryContainer(core.a1.tone(10))
            .withSecondary(core.a2.tone(40))
            .withOnSecondary(core.a2.tone(100))
            .withSecondaryContainer(core.a2.tone(90))
            .withOnSecondaryContainer(core.a2.tone(10))
            .withTertiary(core.a3.tone(40))
            .withOnTertiary(core.a3.tone(100))
            .withTertiaryContainer(core.a3.tone(90))
            .withOnTertiaryContainer(core.a3.tone(10))
            .withError(core.error.tone(40))
            .withOnError(core.error.tone(100))
            .withErrorContainer(core.error.tone(90))
            .withOnErrorContainer(core.error.tone(10))
            .withBackground(core.n1.tone(99))
            .withOnBackground(core.n1.tone(10))
            .withSurface(core.n1.tone(99))
            .withOnSurface(core.n1.tone(10))
            .withSurfaceVariant(core.n2.tone(90))
            .withOnSurfaceVariant(core.n2.tone(30))
            .withOutline(core.n2.tone(50))
            .withOutlineVariant(core.n2.tone(80))
            .withShadow(core.n1.tone(0))
            .withScrim(core.n1.tone(0))
            .withInverseSurface(core.n1.tone(20))
            .withInverseOnSurface(core.n1.tone(95))
            .withInversePrimary(core.a1.tone(80))

        private fun darkFromCorePalette(core: CorePalette): Scheme = Scheme()
            .withPrimary(core.a1.tone(80))
            .withOnPrimary(core.a1.tone(20))
            .withPrimaryContainer(core.a1.tone(30))
            .withOnPrimaryContainer(core.a1.tone(90))
            .withSecondary(core.a2.tone(80))
            .withOnSecondary(core.a2.tone(20))
            .withSecondaryContainer(core.a2.tone(30))
            .withOnSecondaryContainer(core.a2.tone(90))
            .withTertiary(core.a3.tone(80))
            .withOnTertiary(core.a3.tone(20))
            .withTertiaryContainer(core.a3.tone(30))
            .withOnTertiaryContainer(core.a3.tone(90))
            .withError(core.error.tone(80))
            .withOnError(core.error.tone(20))
            .withErrorContainer(core.error.tone(30))
            .withOnErrorContainer(core.error.tone(80))
            .withBackground(core.n1.tone(10))
            .withOnBackground(core.n1.tone(90))
            .withSurface(core.n1.tone(10))
            .withOnSurface(core.n1.tone(90))
            .withSurfaceVariant(core.n2.tone(30))
            .withOnSurfaceVariant(core.n2.tone(80))
            .withOutline(core.n2.tone(60))
            .withOutlineVariant(core.n2.tone(30))
            .withShadow(core.n1.tone(0))
            .withScrim(core.n1.tone(0))
            .withInverseSurface(core.n1.tone(90))
            .withInverseOnSurface(core.n1.tone(20))
            .withInversePrimary(core.a1.tone(40))
    }
}
